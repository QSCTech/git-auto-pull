#!/bin/sh
#
# Copyright (C) Senorsen (Zhang Sen) <sen@senorsen.com>
#
# This software is distributed under the terms of GPLv3 or later,
# See `LICENSE' for more information. 
#
# Requirement: sudo apt-get install gcc-multilib g++-multilib libtool autoconf automake libssh-dev libssh-dev:i386 # and etc...

set -e

if [ -n "$1" ]; then
	LIBDIR=$1
fi

if [ -z "$LIBDIR" ]; then
	LIBDIR=tmp
	echo "Use default path: $LIBDIR"
else
	echo "Use specified path: $LIBDIR"
fi

PWDA=$PWD
LIBDIR=`readlink -f "$LIBDIR"`
mkdir -p $LIBDIR

git submodule update --init --recursive
echo Libraries downloaded.
cp -rf $PWDA/libs/. $LIBDIR/

echo $PWDA

echo "Preparing gettext..."
cd $LIBDIR/gettext
# gperf texinfo is needed
./autogen.sh
./configure
make

do_compile0() {
	PATH00=$LIBDIR/$THINGS
	PATH32=$LIBDIR/$THINGS-bin32
	PATH64=$LIBDIR/$THINGS-bin64
	if [ -d $PATH32 ]; then
		if [ -d $PATH64 ]; then
			return
		fi
	fi
	rm -rf $PATH32
	rm -rf $PATH64
	mkdir -p $PATH32
	mkdir -p $PATH64
	cd $PATH00 && echo "Entering ${PATH00}"
	make clean || true
	rm -rf Makefile
	if [ -n "$OPT32" ]; then
		$OPT32 --prefix=$PATH32
	else
		if [ -x autogen.sh ]; then
			GETTEXT_PREFIX=$LIBDIR/gettext/gettext-runtime/src ./autogen.sh
		fi
		CCASFLAGS="-m32" CPPFLAGS="-m32" CFLAGS="-m32" ./configure --prefix=$PATH32 $PARA32
	fi
	(make || make) && make install || (echo "Make failed. "; return 1;)
	make clean || true
	if [ -n "$OPT64" ]; then
		$OPT64 --prefix=$PATH64
	else
		if [ -x autogen.sh ]; then
			GETTEXT_PREFIX=$LIBDIR/gettext/gettext-runtime/src ./autogen.sh
		fi
		CCASFLAGS="-m64" CPPFLAGS="-m64" CFLAGS="-m64" ./configure --prefix=$PATH64 $PARA64
	fi
	(make || make) && make install || (echo "Make failed. "; return 1;)
	cd $PWDA
}

PARA32=""
PARA64=""
THINGS="zlib"
do_compile0

OPT32="setarch i386 ./config -m32 -fPIC shared "
OPT64="setarch x86_64 ./config -m64 -fPIC shared "
THINGS="openssl"
do_compile0

OPT32=""
OPT64=""
PARA32=" --enable-static "
PARA64=" --enable-static "
THINGS=libgpg-error
do_compile0
PARA32=" --with-gpg-error-prefix=$LIBDIR/$THINGS-bin32 --disable-asm --enable-static "
PARA64=" --with-gpg-error-prefix=$LIBDIR/$THINGS-bin64 --disable-asm --enable-static "
THINGS=libgcrypt
do_compile0

THINGS=json-c

do_compile1() {
	PATH32=$LIBDIR/$THINGS-bin32
	PATH64=$LIBDIR/$THINGS-bin64
	if [ -d $PATH32 ]; then
		if [ -d $PATH64 ]; then
			return
		fi
	fi
	rm -rf $PATH32
	rm -rf $PATH64
	mkdir -p $PATH32
	mkdir -p $PATH64
	cd $LIBDIR/$THINGS && echo "Entering $LIBDIR/${THINGS}"
	make clean || true
	sh autogen.sh
	CFLAGS=-m32 ./configure --prefix=$PATH32 && make && make install
	make clean || true
	CFLAGS=-m64 ./configure --prefix=$PATH64 && make && make install
	cd $PWDA
}

do_compile1

THINGS=libssh2

do_compile2() {
	PATH32=$LIBDIR/$THINGS-bin32
	PATH64=$LIBDIR/$THINGS-bin64
	if [ -d $PATH32 ]; then
		if [ -d $PATH64 ]; then
			return
		fi
	fi
	rm -rf $PATH32
	rm -rf $PATH64
	cd $LIBDIR/$THINGS
	make clean || true
	./buildconf
	CFLAGS="-m32" ./configure --prefix=$PATH32 --with-libgcrypt-prefix=$LIBDIR/libgcrypt-bin32 && make && make install
	make clean || true
	CFLAGS="-m64" ./configure --prefix=$PATH64 --with-libgcrypt-prefix=$LIBDIR/libgcrypt-bin64 && make && make install
	cd $PWDA
}

do_compile2

THINGS=http-parser

do_compile3() {
	PATH32=$LIBDIR/$THINGS-bin32
	PATH64=$LIBDIR/$THINGS-bin64
	if [ -d $PATH32 ]; then
		if [ -d $PATH64 ]; then
			return
		fi
	fi
	rm -rf $PATH32
	rm -rf $PATH64
	mkdir -p $PATH32
	mkdir -p $PATH64
	cp -r $LIBDIR/$THINGS/* $PATH32/
	cp -r $LIBDIR/$THINGS/* $PATH64/
	cd $PATH32
	make clean || true
	export CFLAGS="-m32"
	export CPPFLAGS="-m32"
	make package
	make library
	cd $PATH64
	make clean || true
	export CFLAGS="-m64"
	export CPPFLAGS="-m64"
	make package
	make library
	cd $PWDA
}

do_compile3

THINGS=libgit2

do_compile4() {
	PATH32=$LIBDIR/$THINGS-bin32
	PATH64=$LIBDIR/$THINGS-bin64
	if [ -d $PATH32 ]; then
		if [ -d $PATH64 ]; then
			return
		fi
	fi
	rm -rf $PATH32
	rm -rf $PATH64
	mkdir -p $PATH32
	mkdir -p $PATH64
	cd $PWDA
	cp miscellaneous/patch_lib_1.patch $LIBDIR/
	cp miscellaneous/patch_lib_2.patch $LIBDIR/
	TMPSTR_PWD="$LIBDIR/libssh2-bin32/include/"
	TMPSTR_PWD=$(echo $TMPSTR_PWD | sed 's|\\|\\\\|g' | sed 's|/|\\/|g')
	sed -i "s/SEN_INCLUDE/$TMPSTR_PWD/g" $PWDA/tmp/patch_lib_1.patch
	TMPSTR_PWD="$LIBDIR/libssh2-bin32/lib/libssh2.so"
	TMPSTR_PWD=$(echo $TMPSTR_PWD | sed 's|\\|\\\\|g' | sed 's|/|\\/|g')
	sed -i "s/SEN_LIB/$TMPSTR_PWD/g" $PWDA/tmp/patch_lib_1.patch
	cd $LIBDIR/$THINGS
	git checkout CMakeLists.txt
	patch -f < $LIBDIR/patch_lib_1.patch
	patch -f < $LIBDIR/patch_lib_2.patch
	cd $PATH32
	cmake $LIBDIR/$THINGS -DCMAKE_SHARED_LINKER_FLAGS="-m32" -DCMAKE_C_FLAGS="-m32" -DCMAKE_FIND_ROOT_PATH="$LIBDIR/libssh2-bin32/" -DZLIB_LIBRARY="$LIBDIR/zlib-bin64/lib/libz.so" -DOPENSSL_SSL_LIBRARY="$LIBDIR/openssl-bin32/lib/libssl.so" -DOPENSSL_CRYPTO_LIBRARY="$LIBDIR/openssl-bin32/lib/libcrypto.so" -DCMAKE_LIBRARY_PATH="$LIBDIR/libssh2-bin32/lib/" -DBUILD_SHARED_LIBS="OFF" -DBUILD_CLAR="OFF" -DTHREADSAFE="OFF" -DCMAKE_INSTALL_PREFIX=$PATH32
	cmake --build .
	rm $LIBDIR/patch_lib_1.patch
	rm $LIBDIR/patch_lib_2.patch
	cd $PWDA
	cp miscellaneous/patch_lib_1.patch $LIBDIR/
	cp miscellaneous/patch_lib_2.patch $LIBDIR/
	TMPSTR_PWD="$LIBDIR/libssh2-bin64/include/"
	TMPSTR_PWD=$(echo $TMPSTR_PWD | sed 's|\\|\\\\|g' | sed 's|/|\\/|g')
	sed -i "s/SEN_INCLUDE/$TMPSTR_PWD/g" $PWDA/tmp/patch_lib_1.patch
	TMPSTR_PWD="$LIBDIR/libssh2-bin64/lib/libssh2.so"
	TMPSTR_PWD=$(echo $TMPSTR_PWD | sed 's|\\|\\\\|g' | sed 's|/|\\/|g')
	sed -i "s/SEN_LIB/$TMPSTR_PWD/g" $PWDA/tmp/patch_lib_1.patch
	cd $LIBDIR/$THINGS
	git checkout CMakeLists.txt
	patch -f < $LIBDIR/patch_lib_1.patch
	patch -f < $LIBDIR/patch_lib_2.patch
	cd $PATH64
	cmake $LIBDIR/$THINGS -DCMAKE_SHARED_LINKER_FLAGS="-m64" -DCMAKE_C_FLAGS="-m64" -DCMAKE_FIND_ROOT_PATH="$LIBDIR/libssh2-bin64/" -DZLIB_LIBRARY="$LIBDIR/zlib-bin64/lib/libz.so" -DOPENSSL_SSL_LIBRARY="$LIBDIR/openssl-bin32/lib/libssl.so" -DOPENSSL_CRYPTO_LIBRARY="$LIBDIR/openssl-bin32/lib/libcrypto.so" -DCMAKE_LIBRARY_PATH="$LIBDIR/libssh2-bin64/lib/" -DBUILD_SHARED_LIBS="OFF" -DBUILD_CLAR="OFF" -DTHREADSAFE="OFF" -DCMAKE_INSTALL_PREFIX=$PATH64
	cmake --build .
	cd $PWDA
}

do_compile4

